name: 'Cyber Chief Security Scanner'
description: 'A security scanner action'
branding:
  icon: 'shield'
  color: 'green'
inputs:
  target_url:
    description: 'Cyber Chief Automated Test URL'
    required: true
  api_token:
    description: 'Cyber Chief API Token'
    required: true
  scope:
    description: 'Scope of the Web App Scan (reconnaissance, attack, infiltration)'
    default: 'reconnaissance'
    required: false
  scan_type:
    description: 'Type of the scan'
    default: ''
    required: false
  api_name:
    description: 'Name of the API'
    default: ''
    required: false
  raider_name:
    description: 'Raider account Name'
    default: ''
    required: false
  raider_type:
    description: 'Type of the raider'
    default: 'aws'
    required: false
  scan_name:
    description: 'Raider Scan Name'
    default: ''
    required: false
  regions:
    description: 'Raider scan regions'
    default: ''
    required: false
  services:
    description: 'Raider scan services'
    default: ''
    required: false
  frameworks:
    description: 'Raider scan frameworks'
    default: ''
    required: false
  fail_high:
    description: 'Fail on high vulnerabilities'
    default: false
    required: false
  fail_high_medium:
    description: 'Fail on high and medium vulnerabilities'
    default: false
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up JQ
      run: |
        sudo apt-get update -qy
        sudo apt-get install -y jq
      shell: bash

    - name: Run Security Scanner
      shell: bash
      run: |
        echo "Making a POST call to ${{ inputs.target_url }}"
        if [[ "${{ inputs.scan_type }}" == "web" ]]; then
          scope_key="test_scope"
          scope_value="${{ inputs.scope }}"
        elif [[ "${{ inputs.scan_type }}" == "api" ]]; then
          scope_key="api_name"
          scope_value="${{ inputs.api_name }}"
        elif [[ "${{ inputs.scan_type }}" == "raider" ]]; then
          scope_key="raider_name"
          scope_value="${{ inputs.raider_name }}"

          IFS=', ' read -r -a regions_array <<< "${{ inputs.regions }}"
          IFS=', ' read -r -a services_array <<< "${{ inputs.services }}"
          IFS=', ' read -r -a frameworks_array <<< "${{ inputs.frameworks }}"

          regions_string=$(IFS=','; echo "${regions_array[*]}")
          services_string=$(IFS=','; echo "${services_array[*]}" | tr '[:upper:]' '[:lower:]') 
          frameworks_string=$(IFS=','; echo "${frameworks_array[*]}" | tr '[:upper:]' '[:lower:]')

          if [ -z "${services_array[*]}" ]; then
            frameworks_string="All"
          fi

          if [ -z "${frameworks_array[*]}" ]; then
            services_string="All"
          fi
        else
          echo "Invalid scan_type specified"
          exit 1
        fi

        response=$(curl -s -X POST "${{ inputs.target_url }}" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          --data-urlencode "$scope_key=$scope_value" \
          --data-urlencode "is_github_scan=true" \
          $(if [[ "${{ inputs.scan_type }}" == "raider" ]]; then
            echo "--data-urlencode raider_type=${{ inputs.raider_type }} \
                  --data-urlencode scan_name=${{ inputs.scan_name }} \
                  --data-urlencode regions=$regions_string \
                  --data-urlencode services=$services_string \
                  --data-urlencode frameworks=$frameworks_string"
          fi))

        if [ "${{ inputs.fail_high }}" == "true" ] || [ "${{ inputs.fail_high_medium }}" == "true" ]; then
          status_url=$(echo "$response" | jq -r '.status_url')
          echo "Request succeeded, status URL: $status_url"
          
          # Perform GET request to check status
          scan_complete="false"
          while [ "$scan_complete" == false ]; do
            status_response=$(curl -s -X GET "$status_url?failOnHighVulns=${{ inputs.fail_high }}&failOnHighMediumVulns=${{ inputs.fail_high_medium }}" \
              -H "Authorization: Bearer ${{ inputs.api_token }}")
            
            echo "Status Response: $status_response"
            status=$(echo "$status_response" | jq -r '.status')
            echo "Scan status: $status"
            
            if [ "$status" == "completed" ]; then
              echo "Scan completed."
              
              if echo "$status_response" | jq -e 'has("vulnerabilities") and (.vulnerabilities != null)' > /dev/null; then
                vulnerabilities=$(echo "$status_response" | jq -r '.vulnerabilities')

                echo "$vulnerabilities" | jq -r '.high[] | .title, .risk, .link' | while IFS=$'\n' read -r title && IFS=$'\n' read -r risk && IFS=$'\n' read -r link; do
                  # Check if the issue already exists
                  echo "==============================================="
                  echo "Title: $title"
                  echo "Severity: $risk"
                  echo "URL: $link"
                  echo "==============================================="
                  if [ -z "$(echo "$vulnerabilities" | jq -r '.high[] | .title')" ]; then
                    break
                  fi
                done

                echo "$vulnerabilities" | jq -r '.medium[] | .title, .risk, .link' | while IFS=$'\n' read -r title && IFS=$'\n' read -r risk && IFS=$'\n' read -r link; do
                  echo "==============================================="
                  echo "Title: $title"
                  echo "Severity: $risk"
                  echo "URL: $link"
                  echo "==============================================="

                  if [ -z "$(echo "$vulnerabilities" | jq -r '.medium[] | .title')" ]; then
                    break
                  fi
                done
                echo "Vulnerabilities found. Failing Job."
                echo "Issues are created for each vulnerability. Please go to Issues page for more details."
                exit 1
              else
                echo "No vulnerabilities found."
                scan_complete="true"
                echo "$scan_complete"
              fi
            fi
          done
        fi
